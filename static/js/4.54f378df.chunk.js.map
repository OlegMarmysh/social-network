{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog.module.css","components/Dialogs/Dialog.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","Dialog","props","className","style","dialog","to","dialogId","activeClassName","activeLink","src","photos","photo","alt","userName","Dialogs","useState","message","setMessage","s","dialogs","map","d","key","id","small","dialogDate","lastDialogActivityDate","messages","selectedDialogId","preTitle","messagesBlock","length","m","senderName","body","value","onChange","e","currentTarget","rows","onClick","sendMessage","DialogsContainer","this","init","match","params","userId","prevProps","prevState","snapshot","update","React","Component","compose","connect","state","dialogsPage","withRouter","withAuthRedirect"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,SAAW,0BAA0B,cAAgB,+BAA+B,QAAU,2B,oBCAxLD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,yKCmBhDC,EAfA,SAACC,GACZ,OACI,yBAAKC,UAAWC,IAAMC,QAClB,kBAAC,IAAD,CAASC,GAAE,mBAAcJ,EAAMK,UAAYC,gBAAiBJ,IAAMK,YAC9D,6BACI,yBAAKC,IAAKR,EAAMS,QAAUC,IAAOC,IAAI,MAEzC,6BACKX,EAAMY,aCyCZC,EAlDC,SAACb,GAAW,IAAD,EACOc,mBAAS,IADhB,mBAChBC,EADgB,KACPC,EADO,KAMvB,OACI,yBAAKf,UAAWgB,IAAEC,SACd,6BACI,uCACClB,EAAMkB,QAAQC,IAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAQC,IAAKD,EAAEE,GAAIjB,SAAUe,EAAEE,GAAIV,SAAUQ,EAAER,SAAUH,OAAQW,EAAEX,OAAOc,MAClEC,WAAYJ,EAAEK,4BAGlD,yBAAKxB,UAAWgB,IAAES,UACd,yCACE1B,EAAM2B,kBAAoB,yBAAK1B,UAAWgB,IAAEW,UAAlB,wBAExB5B,EAAM2B,kBACN,yBAAK1B,UAAWgB,IAAEY,eACd,6BACM7B,EAAM0B,SAASI,OAAS,EAAK9B,EAAM0B,SAASP,IAAI,SAAAY,GAAC,OAAI,yBAAKV,IAAKU,EAAET,GACPrB,UAAWgB,IAAEF,SACrE,6BACKgB,EAAEC,YAEP,6BACKD,EAAEE,SAED,8CAEd,6BACI,8BAAUC,MAAOnB,EAASoB,SAAU,SAACC,GACjCpB,EAAWoB,EAAEC,cAAcH,QAC5BI,KAAK,MACR,6BACI,4BAAQC,QAAS,WAjCzCvC,EAAMwC,YAAYxC,EAAM2B,iBAAkBZ,GAC1CC,EAAW,MAgCa,c,yCChC1ByB,E,4LAEEC,KAAK1C,MAAM2C,KAAKD,KAAK1C,MAAM4C,MAAMC,OAAOC,U,yCAEzBC,EAAWC,EAAWC,GAClCP,KAAK1C,MAAM4C,MAAMC,OAAOC,SAAWC,EAAUH,MAAMC,OAAOC,QACzDJ,KAAK1C,MAAMkD,OAAOR,KAAK1C,MAAM4C,MAAMC,OAAOC,U,+BAK9C,OACI,kBAAC,EAAYJ,KAAK1C,W,GAZCmD,IAAMC,WA0BtBC,4BAAQC,YARD,SAACC,GACnB,MAAO,CACHrC,QAASqC,EAAMC,YAAYtC,QAC3BQ,SAAU6B,EAAMC,YAAY9B,SAC5BC,iBAAkB4B,EAAMC,YAAY7B,mBAII,CAACgB,SAAMO,WAAQV,kBAC3DiB,IACAC,IAFWL,CAGdZ","file":"static/js/4.54f378df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xx2s\",\"messages\":\"Dialogs_messages__3bNMx\",\"preTitle\":\"Dialogs_preTitle__2bQ6n\",\"messagesBlock\":\"Dialogs_messagesBlock__1KsOw\",\"message\":\"Dialogs_message__qD0pm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__36BgN\",\"activeLink\":\"Dialog_activeLink__1cTVp\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from './Dialog.module.css';\r\nimport photo from '../../images/users-vector-icon-png_260862.jpg';\r\n\r\nconst Dialog = (props) => {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={`/dialogs/${props.dialogId}`} activeClassName={style.activeLink}>\r\n                <div>\r\n                    <img src={props.photos || photo} alt=\"\"/>\r\n                </div>\r\n                <div>\r\n                    {props.userName}\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialog;","import React, {useState} from 'react';\nimport s from './Dialogs.module.css';\nimport Dialog from \"./Dialog\";\n\nconst Dialogs = (props) => {\n    const [message, setMessage] = useState('');\n    const sendMessage = () => {\n        props.sendMessage(props.selectedDialogId, message);\n        setMessage('');\n    };\n    return (\n        <div className={s.dialogs}>\n            <div>\n                <h3>Dialogs</h3>\n                {props.dialogs.map(d => <Dialog key={d.id} dialogId={d.id} userName={d.userName} photos={d.photos.small}\n                                                dialogDate={d.lastDialogActivityDate}\n                />)}\n            </div>\n            <div className={s.messages}>\n                <h3>Messages</h3>\n                {!props.selectedDialogId && <div className={s.preTitle}>Please select dialog</div>}\n                {\n                    props.selectedDialogId &&\n                    <div className={s.messagesBlock}>\n                        <div>\n                            {(props.messages.length > 0) ? props.messages.map(m => <div key={m.id}\n                                                                                        className={s.message}>\n                                <div>\n                                    {m.senderName}\n                                </div>\n                                <div>\n                                    {m.body}\n                                </div>\n                            </div>) : <span>No messages</span>}\n                        </div>\n                        <div>\n                            <textarea value={message} onChange={(e) => {\n                                setMessage(e.currentTarget.value)\n                            }} rows=\"3\"/>\n                            <div>\n                                <button onClick={() => {\n                                    sendMessage()\n                                }}>Send\n                                </button>\n                            </div>\n                        </div>\n\n                    </div>\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Dialogs;","import React from 'react';\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {init, update, sendMessage} from \"../../redux/dialogsPageReducer\";\nimport {withRouter} from \"react-router-dom\";\n\nclass DialogsContainer extends React.Component {\n    componentDidMount() {\n        this.props.init(this.props.match.params.userId)\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.match.params.userId !== prevProps.match.params.userId){\n            this.props.update(this.props.match.params.userId)\n        }\n    }\n\n    render(){\n        return (\n            <Dialogs {...this.props}/>\n        )\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        selectedDialogId: state.dialogsPage.selectedDialogId\n    }\n};\n\nexport default compose(connect(mapStateToProps, {init, update, sendMessage}),\n    withRouter,\n    withAuthRedirect)\n(DialogsContainer);"],"sourceRoot":""}