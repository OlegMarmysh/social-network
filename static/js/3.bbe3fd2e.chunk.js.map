{"version":3,"sources":["components/Profil/Description/Description.module.css","components/Profil/MyPost/Mypost.module.css","components/Profil/MyPost/Post/Post.module.css","components/Profil/Description/ProfileStatusWithHooks.js","components/Profil/Description/Description.js","components/Profil/MyPost/Post/Post.js","components/Profil/MyPost/MyPost.js","components/Profil/MyPost/MyPostContainer.js","components/Profil/Profile.js","components/Profil/ProfileContainer.js"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","Description","profile","isOwner","savePhoto","Preloader","className","s","description","src","avatar","photos","large","userPhoto","type","target","files","length","name","Post","post","likeCounts","maxLength20","maxLengthCreator","MyPost","React","memo","console","log","postsElements","posts","map","p","onSubmit","values","addPost","newTextPost","Posts","AddMessageForm","handleSubmit","Field","component","Textarea","validate","required","placeholder","reduxForm","form","MyPostContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","withRouter","auth"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,OAAS,8B,oBCA1ED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,oBCA1DD,EAAOC,QAAU,CAAC,KAAO,qB,uIC6BVC,EA5BgB,SAACC,GAAW,IAAD,EACNC,oBAAS,GADH,mBAC/BC,EAD+B,KACrBC,EADqB,OAEVF,mBAASD,EAAMI,QAFL,mBAE/BA,EAF+B,KAEvBC,EAFuB,KAGtCC,qBAAU,WAAKD,EAAUL,EAAMI,UAAU,CAACJ,EAAMI,SAW5C,OACI,8BACMF,GACF,6BACI,0BAAMK,cAdG,WACrBJ,GAAY,KAawCH,EAAMI,QAAU,cAG3DF,GACD,2BAAOM,SAXE,SAACC,GAClBJ,EAAUI,EAAEC,cAAcC,QAUcA,MAAOP,EAAQQ,OAfhC,WACvBT,GAAY,GACZH,EAAMa,iBAAiBT,IAa4DU,WAAW,M,kBCKvFC,EAvBK,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,QAASZ,EAAkD,EAAlDA,OAAQS,EAA0C,EAA1CA,iBAAkBI,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAC9D,IAAKF,EACD,OAAO,kBAACG,EAAA,EAAD,MAOX,OACI,yBAAKC,UAAWC,IAAEC,aACd,6BACI,yBAAKC,IAAI,wDAEb,yBAAKH,UAAWC,IAAEG,QACd,yBAAKD,IAAKP,EAAQS,OAAOC,OAASC,MACjCV,GAAW,2BAAOW,KAAM,OAAQpB,SAZxB,SAACC,GACfA,EAAEoB,OAAOC,MAAMC,QACdb,EAAUT,EAAEoB,OAAOC,MAAM,GAAGE,SAWxB,kBAAC,EAAD,CAAwB5B,OAAQA,EAAQS,iBAAkBA,O,oCCN3DoB,EAdH,SAACjC,GACT,OACI,6BACI,yBAAKoB,UAAWC,IAAEa,MACd,yBAAKX,IAAI,0DACRvB,EAAMkC,KACP,6BACI,sCAAYlC,EAAMmC,gB,iCCHhCC,EAAcC,YAAiB,IAE/BC,EAASC,IAAMC,MAAK,SAACxC,GACvByC,QAAQC,IAAI,UACZ,IAAIC,EAAgB3C,EAAM4C,MAAMC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMZ,KAAMY,EAAEZ,KAAMC,WAAYW,EAAEX,gBAK3E,OACI,yBAAKf,UAAWC,IAAEiB,QACd,wCACA,kBAAC,EAAD,CAAgBS,SANR,SAACC,GACbhD,EAAMiD,QAAQD,EAAOE,gBAMjB,yBAAK9B,UAAWC,IAAE8B,OACbR,OAMbS,EAAiB,SAACpD,GAClB,OACI,0BAAM+C,SAAU/C,EAAMqD,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOtB,KAAK,cAAcuB,UAAWC,IAAUC,SAAU,CAACC,IAAUtB,GAAcuB,YAAa,kBAEnG,6BACI,0CAMhBP,EAAeQ,YAAU,CAACC,KAAM,yBAAjBD,CAA2CR,GAE3Cd,Q,gBC5BAwB,EAFSC,aAPF,SAACC,GACnB,MAAO,CACHpB,MAAOoB,EAAMC,YAAYrB,MACzBM,YAAac,EAAMC,YAAYf,eAIW,CAACD,aAA3Bc,CAAsCzB,GCK/C4B,EAbC,SAAClE,GACb,OACI,6BACI,kBAAC,EAAD,CAAagB,QAAWhB,EAAMgB,QAASZ,OAAQJ,EAAMI,OACxCS,iBAAkBb,EAAMa,iBAAkBI,QAASjB,EAAMiB,QACzDC,UAAWlB,EAAMkB,YAG9B,kBAAC,EAAD,Q,eCLNiD,E,yLAGE,IAAIC,EAAOC,KAAKrE,MAAMsE,MAAMC,OAAOH,OAC9BA,IACDA,EAAOC,KAAKrE,MAAMwE,kBAEdH,KAAKrE,MAAMyE,QAAQC,KAAK,UAGhCL,KAAKrE,MAAM2E,eAAeP,GAC1BC,KAAKrE,MAAM4E,cAAcR,K,0CAGzBC,KAAKQ,mB,yCAEUC,EAAWC,EAAWC,GAClCX,KAAKrE,MAAMsE,MAAMC,OAAOH,SAAWU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,mB,+BAKT,OACI,6BACI,kBAAC,EAAD,iBAAaR,KAAKrE,MAAlB,CAAyBiB,SAAYoD,KAAKrE,MAAMsE,MAAMC,OAAOH,e,GAzB9C7B,IAAM0C,WAqCtBC,4BAAQC,IAAYpB,aANb,SAACC,GAAD,MAAY,CAC9BhD,QAASgD,EAAMC,YAAYjD,QAC3BZ,OAAQ4D,EAAMC,YAAY7D,OAC1BoE,gBAAiBR,EAAMoB,KAAKhB,UAG4B,CAACO,mBAAgBC,kBAAe/D,qBAAkBK,gBAA/FgE,CAEdf","file":"static/js/3.bbe3fd2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Description_description__1DRRL\",\"avatar\":\"Description_avatar__3xevs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPost\":\"Mypost_MyPost__2B5wH\",\"Posts\":\"Mypost_Posts__6s4Zu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1FBKl\"};","import React, {useState, useEffect}from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    useEffect(()=>{setStatus(props.status)}, [props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status)\r\n    };\r\n    const onChangeInput= (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'No status'}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <input onChange={onChangeInput} value={status} onBlur={deactivateEditMode} autoFocus={true}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './Description.module.css';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../images/users-vector-icon-png_260862.jpg\";\n\nconst Description = ({profile, status, updateUserStatus, isOwner, savePhoto}) => {\n    if (!profile){\n        return <Preloader/>\n    }\n    let onChooseAvatar = (e) => {\n        if(e.target.files.length){\n            savePhoto(e.target.files[0].name)\n        }\n};\n    return (\n        <div className={s.description}>\n            <div >\n                <img src='http://loveopium.ru/content/2016/07/mongol/00s.jpg'/>\n            </div>\n            <div className={s.avatar}>\n                <img src={profile.photos.large || userPhoto}/>\n                {isOwner && <input type={'file'} onChange={onChooseAvatar}/>}\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Description;","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post =(props) =>{\n    return(\n        <div>\n            <div className={s.post}>\n                <img src='https://avatarko.ru/img/kartinka/1/multfilm_gomer.png'/>\n                {props.post}\n                <div>\n                    <span>Like {props.likeCounts}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './Mypost.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../Common/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utilits/validators\";\n\nconst maxLength20 = maxLengthCreator(20);\n\nconst MyPost = React.memo((props) => {\n    console.log('render');\n    let postsElements = props.posts.map(p => <Post post={p.post} likeCounts={p.likeCounts}/>);\n\n    let onAddPost = (values) => {\n        props.addPost(values.newTextPost);\n    };\n    return (\n        <div className={s.MyPost}>\n            <h3>My posts</h3>\n            <AddMessageForm onSubmit={onAddPost}/>\n            <div className={s.Posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nlet AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name='newTextPost' component={Textarea} validate={[required, maxLength20]} placeholder={'Post message'}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n    )\n};\n\nAddMessageForm=reduxForm({form: 'ProfileAddMessageForm'})(AddMessageForm);\n\nexport default MyPost;","import React from 'react';\nimport MyPost from \"./MyPost\";\nimport {connect} from \"react-redux\";\nimport {addPost} from \"../../../redux/profilePageReducer\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newTextPost: state.profilePage.newTextPost\n    }\n};\n\nconst MyPostContainer = connect (mapStateToProps, {addPost}) (MyPost);\n\nexport default MyPostContainer;","import React from 'react';\nimport Description from \"./Description/Description\";\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <Description profile = {props.profile} status={props.status}\n                         updateUserStatus={props.updateUserStatus} isOwner={props.isOwner}\n                         savePhoto={props.savePhoto}\n\n            />\n            <MyPostContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, updateUserStatus} from \"../../redux/profilePageReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId=this.props.match.params.userId;\r\n        if (!userId){\r\n            userId=this.props.autorizedUserId;\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner = {!this.props.match.params.userId}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userId\r\n});\r\n\r\nexport default compose(withRouter, connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto})\r\n    )\r\n(ProfileContainer);"],"sourceRoot":""}